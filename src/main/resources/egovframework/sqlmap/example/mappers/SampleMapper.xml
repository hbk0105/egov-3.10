<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.web.sample.cntrl.mapper.SampleMapper">

	<sql id="searchBoard">
		<!--<if test="searchType != null and searchType != '' and searchTxt != null and searchTxt != '' ">
			<choose>
				<when test='"title".equalsIgnoreCase(searchType)'>
					AND TITLE LIKE CONCAT('%', #{searchTxt}, '%')
				</when>
				<when test='"content".equalsIgnoreCase(searchType)'>
					AND CONTENT LIKE CONCAT('%', #{searchTxt}, '%')
				</when>
				<when test='"witer".equalsIgnoreCase(searchType)'>
					AND USERNAME = #{USERNAME}
				</when>

				<when test='"all".equalsIgnoreCase(searchType)'>
					AND
					(
						TITLE LIKE CONCAT('%', #{searchTxt}, '%')
					OR
						CONTENT LIKE CONCAT('%', #{searchTxt}, '%')
					OR
						 USERNAME = #{searchTxt}
					)
				</when>

			</choose>
		</if>-->

		<where>
			<trim prefixOverrides="AND">
				<if test="searchTxt != null and searchTxt != ''">
					<choose>
						<when test="searchType == null or searchType == '' or 'all'.equalsIgnoreCase(searchType)">
							(
							TITLE LIKE CONCAT('%', #{searchTxt}, '%')
							OR CONTENT LIKE CONCAT('%', #{searchTxt}, '%')
							OR USERNAME = #{searchTxt}
							)
						</when>
						<when test="'title'.equalsIgnoreCase(searchType)">
							TITLE LIKE CONCAT('%', #{searchTxt}, '%')
						</when>
						<when test="'content'.equalsIgnoreCase(searchType)">
							CONTENT LIKE CONCAT('%', #{searchTxt}, '%')
						</when>
						<when test="'writer'.equalsIgnoreCase(searchType)">
							USERNAME = #{searchTxt}
						</when>
					</choose>
				</if>
			</trim>
		</where>

	</sql>

	<select id="findByOne" resultType="hashmap" parameterType="hashmap">
	/* SampleMapper - findByOne */
		SELECT
			ID				/* 글 ID */
			, TITLE         /* 글제목 */
			, CONTENT       /* 글 내용 */
			, USER_ID       /* 작성자 ID */
			, CREATED_AT    /* 작성일자 */
			, UPDATED_AT    /* 수정일자 */
			, IS_DELETED    /* 삭제 여부 */
		FROM BOARDS
		WHERE ID = #{id} LIMIT 0,1
	</select>

	<select id="fileList" resultType="hashmap" parameterType="hashmap">
	/* SampleMapper - fileList */
	SELECT
		ID /* 파일 ID */
		 , BOARD_ID  /* 게시글 ID */
		 , FILE_NAME         /* 파일명 */
		 , FILE_SIZE             /* 파일 크기*/
		 , FILE_TYPE             /* 파일 타입*/
		 , ORIGINAL_FILE_NAME    /* 원본 파일명*/
		 , CREATED_AT            /* 업로드 일자*/
		 , IS_DELETED            /* 삭제 여부*/
	FROM BOARD_FILES
	WHERE  BOARD_ID = #{boardId}
	</select>

	<select id="totalCount" resultType="int" parameterType="hashmap">
	/* SampleMapper - totalCount */
	SELECT
		COUNT(*)
	FROM (
		SELECT
			  TITLE         /* 글제목 */
			 , CONTENT       /* 글 내용 */
			 , (SELECT USERNAME FROM USERS U WHERE U.ID = USER_ID) AS USERNAME       /* 작성자 ID */
		FROM BOARDS WHERE IS_DELETED != 1
	) A
	<include refid="searchBoard"></include>
	</select>


	<select id="findAll" resultType="java.util.HashMap" parameterType="hashmap">
	/* SampleMapper - findAll */
		SELECT
			A.*
		FROM (
			SELECT
			    B.*
			FROM (
				SELECT
					ROW_NUMBER() OVER (ORDER BY ID DESC) RNUM
					 , ID				/* 글 ID */
					 , LAG(ID) OVER(ORDER BY ID DESC) AS PREV_ID /* 이전글 ID */
					 , LEAD(ID) OVER(ORDER BY ID DESC) AS NEWXT_ID /* 다음글 ID */
					 , TITLE         /* 글제목 */
					 , CONTENT       /* 글 내용 */
					 , USER_ID       /* 작성자 ID */
					 , (SELECT USERNAME FROM USERS U WHERE U.ID = USER_ID) AS USERNAME       /* 작성자 ID */
					 , DATE_FORMAT(CREATED_AT, '%Y-%m-%d %H:%i:%S') AS CREATED_AT    /* 작성일자 */
					 , DATE_FORMAT(UPDATED_AT, '%Y-%m-%d %H:%i:%S') AS UPDATED_AT    /* 수정일자 */
					 , IS_DELETED    /* 삭제 여부 */
				FROM BOARDS WHERE IS_DELETED != 1
			) B
		<include refid="searchBoard"></include>
		) A LIMIT #{startPage},#{pageSize}
	</select>
	<select id="selectMaxBoardId" resultType="java.lang.Integer">
	/* SampleMapper - selectMaxBoardId */
	SELECT IFNULL(MAX(ID),0)+1 FROM BOARDS
	</select>

	<insert id="save" parameterType="hashmap">
		/* SampleMapper - save */
		<bind name="safeUserId" value="userId != null ? userId : 1"/>

		INSERT INTO BOARDS
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="boardId != null">ID,</if>
			<if test="title != null">TITLE,</if>
			<if test="content != null">CONTENT,</if>
			<if test="userId != null">USER_ID,</if>
			CREATED_AT
		</trim>
		VALUES
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="boardId != null">#{boardId},</if>
			<if test="title != null">#{title},</if>
			<if test="content != null">#{content},</if>
			<if test="userId != null">#{safeUserId},</if>
			SYSDATE()
		</trim>
	</insert>

	<insert id="fileSave" parameterType="map">
		/* SampleMapper - fileSave */
		<!-- `MAX(ID) + 1`을 먼저 가져와서 `newFileId` 변수에 저장 -->
		<selectKey keyProperty="newFileId" resultType="int" order="BEFORE">
			(SELECT MAX(ID)+1 FROM BOARD_FILES F WHERE F.BOARD_ID = #{boardId})
		</selectKey>

		INSERT INTO BOARD_FILES
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="newFileId != null">ID,</if>
			<if test="boardId != null">BOARD_ID,</if>
			<if test="fileName != null">FILE_NAME,</if>
			<if test="filePath != null">FILE_PATH,</if>
			<if test="size != null">FILE_SIZE,</if>
			<if test="mimeType != null">FILE_TYPE,</if>
			<if test="origFilename != null">ORIGINAL_FILE_NAME,</if>
			CREATED_AT,
			IS_DELETED
		</trim>
		VALUES
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="newFileId != null">#{newFileId},</if>
			<if test="boardId != null">#{boardId},</if>
			<if test="fileName != null">#{fileName},</if>
			<if test="filePath != null">#{filePath},</if>
			<if test="size != null">#{size},</if>
			<if test="mimeType != null">#{mimeType},</if>
			<if test="origFilename != null">#{origFilename},</if>
			SYSDATE(),
			0
		</trim>
	</insert>


	<update id="update" parameterType="hashmap">
		/* SampleMapper - update */
		UPDATE BOARDS
		<trim prefix="SET" suffixOverrides=",">
			<if test="title != null">TITLE = #{title},</if>
			<if test="content != null">CONTENT = #{content},</if>
			UPDATED_AT = SYSDATE()
		</trim>
		WHERE ID = #{id}
	</update>

	<update id="delete" parameterType="hashmap">
	/* SampleMapper - delete */
	UPDATE BOARDS
		SET IS_DELETED = 1
	WHERE ID = #{id}
	</update>
	<delete id="deleteFile" parameterType="hashmap">
	/* SampleMapper - deleteFile */
		DELETE FROM BOARD_FILES WHERE ID = #{id} AND BOARD_ID = #{boardId}
	</delete>

	<select id="fileMap" resultType="java.util.HashMap" parameterType="hashmap">
	/* SampleMapper - fileMap */
	SELECT
		ID
		 , BOARD_ID
		 , FILE_NAME
		 , FILE_PATH
		 , FILE_SIZE
		 , FILE_TYPE
		 , ORIGINAL_FILE_NAME
		 , CREATED_AT
		 , IS_DELETED
	FROM BOARD_FILES
	WHERE 1 = 1
	<if test="id != null and id != '' ">
		AND ID = #{id}
	</if>
	<if test="boardId != null and boardId != '' ">
		AND BOARD_ID = #{boardId}
	</if>
	</select>
</mapper>